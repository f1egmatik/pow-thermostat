# Basic Config
substitutions:
  friendly_name: POW Origin
  device_name: pow-thermostat

  # initial target temperature
  default_temperature: "20"

  # target temperature when somebody home
  comfort_temperature: "21"

  # target temperature when nobody home
  eco_temperature: "19"     
  temp_variation: "0.5" 
  mac1: F1:7B:55:8E:04:68 #smart band
  mac2: 00:03:AA:C5:72:F4 #phone
  mac3: cc

number:
  - platform: template
    name: "Target Temperature"
    device_class: Temperature
    optimistic: true
    min_value: 5
    max_value: 35
    step: 0.5  
    initial_value: $default_temperature
    restore_value: True
    id: target
    on_value_range:
      - below: !lambda "return id(temp).state - $temp_variation;"
        then:
          - switch.turn_off: relay_1    # turn_off for heater / turn_on for cooler
      - above: !lambda "return id(temp).state + $temp_variation;"
        then:
          - switch.turn_on: relay_1     # turn_on for heater / turn_off for cooler

#action:  
#  - number.set:
#      id: settemp
#      value: 21.0

esphome:
  name: $device_name

esp32:
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.0.104
  ap:
    ssid: $device_name
    password: !secret wifi_failover

captive_portal:

#debug:
#  update_interval: 5s
#text_sensor:
#sensor:
# Logger must be at least debug (default)

logger:
#  level: debug
  level: INFO
  baud_rate: 0

api:
  encryption:
    key: !secret api_enc

ota:
  password: !secret ota_pwd

web_server:
  port: 80

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true
    # interval: 5s # try with 300ms if you don't have LAN module
    # window: 5s # try with 300ms if you don't have LAN module
    # active: false
    #continuous: True

  # on_ble_service_data_advertise:
  #   - service_uuid: 477ed199-29ff-4a1d-ae24-f5c0377af319
  #     then: 
  #       - lambda: |-
  #           ESP_LOGI("ble_adv", "Phone ibeacon found");
  #       - number.set:
  #           id: target
  #           value: 21.2
  #       - script.execute: comfort_timeout
  #   - service_uuid: bdba186b-db99-436d-b8bc-f084daffc236
  #     then: 
  #       - lambda: |-
  #           ESP_LOGI("ble_adv", "Phone altbeacon found");
  #       - number.set:
  #           id: target
  #           value: 21.4
  #       - script.execute: comfort_timeout
  #   - service_uuid: 2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6
  #     then: 
  #       - lambda: |-
  #           ESP_LOGI("ble_adv", "Phone ibeacon Scope found");
  #       - number.set:
  #           id: target
  #           value: 21.6
  #       - script.execute: comfort_timeout

  on_ble_advertise:
    - mac_address: $mac1
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
            }
        - script.execute: comfort_timeout
    - mac_address: $mac2
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
            }
            ESP_LOGD("ble_adv", "  Advertised service data:");
            for (auto data : x.get_service_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
            ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
            for (auto data : x.get_manufacturer_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
        - script.execute: comfort_timeout

#esp32_ble_tracker:
#  scan_parameters:

xiaomi_ble:

#bluetooth_proxy:
#  active: true

uart:
  rx_pin: GPIO16
  baud_rate: 4800

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
#   - platform: debug
#     free:
#       name: "Heap Free"
#       internal: True
# #    fragmentation:
# #      name: "Heap Fragmentation"
#     block:
#       name: "Heap Max Block"
#       internal: True
#     loop_time:
#       name: "Loop Time"
#       internal: True

  - platform: xiaomi_lywsd03mmc
    mac_address: "A4:C1:38:15:A7:96"
    bindkey: "d28f0fa324df76fa7b7c92a79324b44f"
    temperature:
      name: "Temperature"
      id: temp
      device_class: temperature
      unit_of_measurement: °C
      on_value_range:
        - below: !lambda "return id(target).state - $temp_variation;"
          then:
            - switch.turn_on: relay_1   # turn_on for heater / turn_off for cooler
        - above: !lambda "return id(target).state + $temp_variation;"
          then:
            - switch.turn_off: relay_1  # turn_off for heater / turn_on for cooler
    humidity:
      name: "Humidity"
    battery_level:
      name: "LYWSD03MMC Battery Level"

  - platform: cse7766
    update_interval: 2s
    current:
      name: $friendly_name Current
      id: a_sensor
    voltage:
      name: $friendly_name Voltage
      id: v_sensor
    power:
      name: $friendly_name Power
      id: w_sensor
      #on_value_range:
      #  - above: 4.0
      #    then:
      #      - light.turn_on: switch_led
      #  - below: 3.0
      #    then:
      #      - light.turn_off: switch_led
    energy:
      name: $friendly_name Energy
      id: wh_sensor

  - platform: total_daily_energy
    name: $friendly_name Total Daily Energy
    power_id: w_sensor

  - platform: wifi_signal
    name: $friendly_name Wifi RSSI
    update_interval: 60s

  - platform: uptime
    id: uptime_sensor
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: template
    name: $friendly_name ESP32 Internal Temp
    device_class: temperature
    unit_of_measurement: °F
    id: esp32_temp
    lambda: return temperatureRead();

  - platform: template
    name: $friendly_name Power Factor
    device_class: power_factor
    id: power_factor
    lambda: return id(w_sensor).state / id(v_sensor).state / id(a_sensor).state;

  - platform: esp32_hall
    name: $friendly_name ESP32 Hall Sensor
    update_interval: 60s

binary_sensor:
  - platform: ble_presence
    mac_address: $mac1
    name: "Smart Band 7"
    filters:
      - delayed_off: 30 min
    on_press:
      then:
        - number.set:
            id: target
            value: $comfort_temperature
    on_release:
      then:
        - number.set:
            id: target
            value: $eco_temperature

  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          switch.toggle: relay_1
      - min_length: 360ms # long press to cycle display info
        max_length: 3s
        then:
          - if:
              condition:
                binary_sensor.is_on: page
              then:
                binary_sensor.template.publish:
                  id: page
                  state: OFF
              else:
                binary_sensor.template.publish:
                  id: page
                  state: ON

  - platform: template # this is a fake sensor to tell the screen which info to show on display
    id: page
    publish_initial_state: true
    internal: true

#display:
#  platform: tm1621
#  id: tm1621_display
#  cs_pin: GPIO25
#  data_pin: GPIO14
#  read_pin: GPIO26
#  write_pin: GPIO27
#  lambda: |-
#    if (id(page).state) {
#      it.display_voltage(true);
#      it.display_kwh(false);
#      it.printf(0, "%.1f", id(v_sensor).state);
#      it.printf(1, "%.1f", id(a_sensor).state);
#    } else {  
#      it.display_voltage(false);
#      it.display_kwh(true);
#      it.printf(0, "%.1f", id(wh_sensor).state);
#      it.printf(1, "%.1f", id(w_sensor).state);
#    }

output:
  - platform: ledc
    id: led
    pin:
      number: GPIO18
      inverted: True

switch:
  - platform: gpio
    name: $friendly_name
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
    pin: GPIO13
    id: relay_1
    on_turn_on: 
      - light.turn_on: switch_led
    on_turn_off: 
      - light.turn_off: switch_led
  - platform: restart
    name: $friendly_name Restart

text_sensor:
  # - platform: debug
  #   device:
  #     name: "Device Info"
  #     internal: True
  #   reset_reason:
  #     name: "Reset Reason"

  - platform: template
    name: $friendly_name Uptime
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP
    ssid:
      name: $friendly_name SSID
    bssid:
      name: $friendly_name BSSID

light:
  - platform: monochromatic
    id: switch_led
    output: led
    internal: True
  - platform: status_led
    id: wifi_status_led
    internal: True
    pin:
      number: GPIO05
      inverted: True

interval:
  - interval: 30s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - light.turn_on: wifi_status_led
        else:
          - light.turn_off: wifi_status_led

script: 
  - id: comfort_timeout
    mode: restart
    then: 
      - number.set:
          id: target
          value: $comfort_temperature
      - delay: 30 min
      - lambda: ESP_LOGI("ble_adv", "Comfort mode off");
      - number.set:
          id: target
          value: $eco_temperature
          #value: !lambda "return id(eco_temperature).state;"
